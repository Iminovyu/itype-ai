import logging, asyncio, requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from langdetect import detect
from config import BOT_TOKEN, AUTH_TOKEN, API_URL, MISTRAL_MODEL
from db import *

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

lang_markup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
     InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
])

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ò–ò. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É!")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("/start ‚Äî –Ω–∞—á–∞—Ç—å\n/stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë\n/history ‚Äî —Å–ø–∏—Å–æ–∫\n/history N ‚Äî –¥–∏–∞–ª–æ–≥\n/lang ‚Äî —è–∑—ã–∫")

@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    stop_session(message.from_user.id)
    await message.answer("‚úÖ –¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")

@dp.message(Command("reset"))
async def cmd_reset(message: Message):
    reset_history(message.from_user.id)
    await message.answer("üóë –ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.")

@dp.message(Command("history"))
async def cmd_history(message: Message):
    user_id = message.from_user.id
    args = message.text.split()
    sessions = get_user_sessions(user_id)
    if len(args) == 1:
        if not sessions:
            await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        else:
            reply = "\n".join([f"{i+1}. {title} ({created})" for i, (sid, title, created) in enumerate(sessions)])
            await message.answer(f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{reply}\n\n/history N ‚Äî —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å")
    else:
        try:
            index = int(args[1]) - 1
            session_id = sessions[index][0]
            msgs = get_session_messages(session_id)
            reply = ""
            for m in msgs:
                prefix = "üë§" if m["role"] == "user" else "ü§ñ"
                reply += f"{prefix} {m['content']}\n\n"
            await message.answer(reply or "‚õîÔ∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
        except:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∏–∑ /history")

@dp.message(Command("lang"))
async def cmd_lang(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=lang_markup)

@dp.callback_query()
async def lang_handler(callback: CallbackQuery):
    await callback.answer("‚öôÔ∏è –Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

@dp.message()
async def handle_message(message: Message):
    if not message.text:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç.")
    
    text = message.text.strip()
    user_id = message.from_user.id

    try:
        lang = detect(text)
    except:
        lang = "en"

    system_prompt = "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ." if lang == "ru" else "Always reply in English."
    save_message(user_id, "user", text)

    session_id = get_session(user_id)
    if session_id:
        history = get_session_messages(session_id)
    else:
        history = [{"role": "user", "content": text}]

    response = await ask_model(history, system_prompt)
    save_message(user_id, "assistant", response)
    await message.answer(response)

async def ask_model(messages, system_instruction: str) -> str:
    headers = {
        "Authorization": AUTH_TOKEN,
        "Content-Type": "application/json"
    }
    payload = {
        "model": MISTRAL_MODEL,
        "messages": [{"role": "system", "content": system_instruction}] + messages
    }
    try:
        resp = await asyncio.to_thread(lambda: requests.post(API_URL, headers=headers, json=payload, timeout=15))
        data = resp.json()
        return data["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ."

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
